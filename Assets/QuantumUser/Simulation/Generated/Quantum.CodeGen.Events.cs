// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 9;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventPlayerKilled.ID: result = typeof(EventPlayerKilled); return;
          case EventGameplayStateChanged.ID: result = typeof(EventGameplayStateChanged); return;
          case EventDamageReceived.ID: result = typeof(EventDamageReceived); return;
          case EventWeaponFired.ID: result = typeof(EventWeaponFired); return;
          case EventFireProjectile.ID: result = typeof(EventFireProjectile); return;
          case EventWeaponSwitchStarted.ID: result = typeof(EventWeaponSwitchStarted); return;
          case EventWeaponReloadStarted.ID: result = typeof(EventWeaponReloadStarted); return;
          case EventDamageInflicted.ID: result = typeof(EventDamageInflicted); return;
          default: break;
        }
      }
      public EventPlayerKilled PlayerKilled(PlayerRef KillerPlayerRef, PlayerRef VictimPlayerRef, Byte WeaponType, QBoolean IsCriticalKill) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventPlayerKilled>(EventPlayerKilled.ID);
        ev.KillerPlayerRef = KillerPlayerRef;
        ev.VictimPlayerRef = VictimPlayerRef;
        ev.WeaponType = WeaponType;
        ev.IsCriticalKill = IsCriticalKill;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameplayStateChanged GameplayStateChanged(EGameplayState State) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameplayStateChanged>(EventGameplayStateChanged.ID);
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDamageReceived DamageReceived(EntityRef Entity, FPVector3 HitPoint, FPVector3 HitNormal) {
        var ev = _f.Context.AcquireEvent<EventDamageReceived>(EventDamageReceived.ID);
        ev.Entity = Entity;
        ev.HitPoint = HitPoint;
        ev.HitNormal = HitNormal;
        _f.AddEvent(ev);
        return ev;
      }
      public EventWeaponFired WeaponFired(Byte WeaponId, EntityRef PlayerEntity, QBoolean JustPressed, QBoolean IsEmpty) {
        var ev = _f.Context.AcquireEvent<EventWeaponFired>(EventWeaponFired.ID);
        ev.WeaponId = WeaponId;
        ev.PlayerEntity = PlayerEntity;
        ev.JustPressed = JustPressed;
        ev.IsEmpty = IsEmpty;
        _f.AddEvent(ev);
        return ev;
      }
      public EventFireProjectile FireProjectile(Byte WeaponId, EntityRef PlayerEntity, FPVector3 TargetPosition, FPVector3 HitNormal) {
        var ev = _f.Context.AcquireEvent<EventFireProjectile>(EventFireProjectile.ID);
        ev.WeaponId = WeaponId;
        ev.PlayerEntity = PlayerEntity;
        ev.TargetPosition = TargetPosition;
        ev.HitNormal = HitNormal;
        _f.AddEvent(ev);
        return ev;
      }
      public EventWeaponSwitchStarted WeaponSwitchStarted(Byte WeaponId, EntityRef PlayerEntity) {
        var ev = _f.Context.AcquireEvent<EventWeaponSwitchStarted>(EventWeaponSwitchStarted.ID);
        ev.WeaponId = WeaponId;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventWeaponReloadStarted WeaponReloadStarted(Byte WeaponId, EntityRef PlayerEntity) {
        var ev = _f.Context.AcquireEvent<EventWeaponReloadStarted>(EventWeaponReloadStarted.ID);
        ev.WeaponId = WeaponId;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDamageInflicted DamageInflicted(PlayerRef Player, QBoolean IsFatal, QBoolean IsCritical) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventDamageInflicted>(EventDamageInflicted.ID);
        ev.Player = Player;
        ev.IsFatal = IsFatal;
        ev.IsCritical = IsCritical;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventPlayerKilled : EventBase {
    public new const Int32 ID = 1;
    public PlayerRef KillerPlayerRef;
    public PlayerRef VictimPlayerRef;
    public Byte WeaponType;
    public QBoolean IsCriticalKill;
    protected EventPlayerKilled(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerKilled() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + KillerPlayerRef.GetHashCode();
        hash = hash * 31 + VictimPlayerRef.GetHashCode();
        hash = hash * 31 + WeaponType.GetHashCode();
        hash = hash * 31 + IsCriticalKill.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameplayStateChanged : EventBase {
    public new const Int32 ID = 2;
    public EGameplayState State;
    protected EventGameplayStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameplayStateChanged() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDamageReceived : EventBase {
    public new const Int32 ID = 3;
    public EntityRef Entity;
    public FPVector3 HitPoint;
    public FPVector3 HitNormal;
    protected EventDamageReceived(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDamageReceived() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + HitPoint.GetHashCode();
        hash = hash * 31 + HitNormal.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventWeaponFired : EventBase {
    public new const Int32 ID = 4;
    public Byte WeaponId;
    public EntityRef PlayerEntity;
    public QBoolean JustPressed;
    public QBoolean IsEmpty;
    protected EventWeaponFired(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventWeaponFired() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + WeaponId.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        hash = hash * 31 + JustPressed.GetHashCode();
        hash = hash * 31 + IsEmpty.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventFireProjectile : EventBase {
    public new const Int32 ID = 5;
    public Byte WeaponId;
    public EntityRef PlayerEntity;
    public FPVector3 TargetPosition;
    public FPVector3 HitNormal;
    protected EventFireProjectile(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventFireProjectile() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + WeaponId.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + HitNormal.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventWeaponSwitchStarted : EventBase {
    public new const Int32 ID = 6;
    public Byte WeaponId;
    public EntityRef PlayerEntity;
    protected EventWeaponSwitchStarted(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventWeaponSwitchStarted() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + WeaponId.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventWeaponReloadStarted : EventBase {
    public new const Int32 ID = 7;
    public Byte WeaponId;
    public EntityRef PlayerEntity;
    protected EventWeaponReloadStarted(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventWeaponReloadStarted() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + WeaponId.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDamageInflicted : EventBase {
    public new const Int32 ID = 8;
    public PlayerRef Player;
    public QBoolean IsFatal;
    public QBoolean IsCritical;
    protected EventDamageInflicted(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDamageInflicted() : 
        base(8, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + IsFatal.GetHashCode();
        hash = hash * 31 + IsCritical.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
